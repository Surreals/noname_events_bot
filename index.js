require('dotenv').config()
const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')
const express = require('express')
const qr = require('qr-image')
const fs = require('fs')
const path = require('path')

const token = process.env.TELEGRAM_BOT_TOKEN
const monoMerchantToken = process.env.MONOBANK_MERCHANT_TOKEN

const bot = new TelegramBot(token, { polling: true })

const events = [
    { id: 1, name: '–ö–æ–Ω—Ü–µ—Ä—Ç –ê', price: 500 }, // –¶—ñ–Ω–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö (UAH)
    { id: 2, name: '–§–µ—Å—Ç–∏–≤–∞–ª—å –ë', price: 75000 },
]

const orders = {} // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å
const userStates = {} // –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id

    const mainMenu = {
        reply_markup: {
            keyboard: [[{ text: 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏' }], [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    }

    bot.sendMessage(chatId, '–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:', mainMenu)

    userStates[chatId] = { state: 'main_menu' }
})

function getTitle(text) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ –ø–µ—Ä—à–æ–≥–æ –¥–µ—Ñ—ñ—Å—É
    const match = text.match(/^[^-]+/);
    return match ? match[0].trim() : '';
  }

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.on('message', (msg) => {
    const chatId = msg.chat.id
    const text = msg.text
    // console.log(msg)

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if (!userStates[chatId]) {
        userStates[chatId] = { state: 'main_menu' }
    }

    const userState = userStates[chatId]

    if (text === 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏') {
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const eventButtons = events.map((event) => {
            return [{ text: `${event.name} - ${event.price / 100} –≥—Ä–Ω.`}]
        })

        const options = {
            reply_markup: {
                keyboard: eventButtons,
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        }

        bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç:', options)

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        userState.state = 'selecting_event'
    } else if (userState.state === 'selecting_event') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–∑–≤—ñ —ñ–≤–µ–Ω—Ç—É

        const selectedEvent = events.find((event) => event.name === getTitle(text))
        if (selectedEvent) {
            userState.selectedEvent = selectedEvent

            // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤
            const quantityButtons = []
            for (let i = 1; i <= 5; i++) {
                quantityButtons.push([{ text: `${i}` }])
            }

            const options = {
                reply_markup: {
                    keyboard: quantityButtons,
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            }

            bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ *${selectedEvent.name}*:`, {
                parse_mode: 'Markdown',
                ...options,
            })

            userState.state = 'selecting_quantity'
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –û–±—Ä–∞–Ω–∏–π —ñ–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.')
        }
    } else if (userState.state === 'selecting_quantity') {
        const quantity = parseInt(text)
        if (!isNaN(quantity) && quantity >= 1 && quantity <= 5) {
            const selectedEvent = userState.selectedEvent
            const totalPrice = selectedEvent.price * quantity

            try {
                const reference = `ticket_${selectedEvent.id}_${chatId}_${Date.now()}`

                // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                orders[reference] = {
                    chatId: chatId,
                    eventId: selectedEvent.id,
                    quantity: quantity,
                }

                const paymentData = {
                    amount: totalPrice,
                    ccy: 980,
                    merchantPaymInfo: {
                        reference: reference,
                        destination: `–û–ø–ª–∞—Ç–∞ ${quantity} –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ ${selectedEvent.name}`,
                    },
                    redirectUrl: 'https://be0f-31-41-95-40.ngrok-free.app/success', // –í–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π redirectUrl
                    webHookUrl: 'https://be0f-31-41-95-40.ngrok-free.app/monobank', // –í–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π webHookUrl
                }

                axios
                    .post('https://api.monobank.ua/api/merchant/invoice/create', paymentData, {
                        headers: {
                            'X-Token': monoMerchantToken,
                            'Content-Type': 'application/json',
                        },
                    })
                    .then((response) => {
                        const { invoiceId, pageUrl } = response.data

                        bot.sendMessage(
                            chatId,
                            `–î–ª—è –æ–ø–ª–∞—Ç–∏ ${quantity} –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ *${selectedEvent.name}* –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n${pageUrl}`,
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    remove_keyboard: true,
                                },
                            }
                        )

                        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        userStates[chatId] = { state: 'main_menu' }
                    })
                    .catch((error) => {
                        console.error(error)
                        bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                        userStates[chatId] = { state: 'main_menu' }
                    })
            } catch (error) {
                console.error(error)
                bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                userStates[chatId] = { state: 'main_menu' }
            }
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –≤—ñ–¥ 1 –¥–æ 5.')
        }
    } else if (text === '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞') {
        bot.sendMessage(
            chatId,
            '–¶–µ –±–æ—Ç –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ –º—É–∑–∏—á–Ω—ñ —ñ–≤–µ–Ω—Ç–∏. –û–±–µ—Ä—ñ—Ç—å "üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏", —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫.'
        )
    } else {
        // bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.')
    }
})

// –û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Monobank
const app = express()
app.use(express.json())

app.post('/monobank', (req, res) => {
    const data = req.body

    if (data.status === 'success') {
        const reference = data.reference
        const order = orders[reference]

        console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ –≤—ñ–¥ Monobank:', data, order)

        if (order) {
            const chatId = order.chatId
            const eventId = order.eventId
            const quantity = order.quantity
            const selectedEvent = events.find((event) => event.id === eventId)

            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–≤–∏—Ç–∫—ñ–≤
            for (let i = 1; i <= quantity; i++) {
                // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–≤–∏—Ç–∫–∞
                const ticketCode = `${reference}_${i}`

                // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–≤–∏—Ç–æ–∫
                const ticketInfo = `–ö–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ ${selectedEvent.name}\n–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥: ${ticketCode}`

                // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É
                const qr_png = qr.image(ticketInfo, { type: 'png' })
                const qrPath = path.join(__dirname, `${ticketCode}.png`)
                const writeStream = fs.createWriteStream(qrPath)

                qr_png.pipe(writeStream)

                writeStream.on('finish', () => {
                    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–≤–∏—Ç–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    bot.sendPhoto(chatId, qrPath, {
                        caption: `‚úÖ –í–∞—à –∫–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ *${selectedEvent.name}*.`,
                        parse_mode: 'Markdown',
                    })
                        .then(() => {
                            // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –∑ QR-–∫–æ–¥–æ–º
                            fs.unlinkSync(qrPath)
                        })
                        .catch((err) => {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–≤–∏—Ç–∫–∞:', err)
                        })
                })
            }

            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ—Ö –∫–≤–∏—Ç–∫—ñ–≤
            bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—Å—ñ –≤–∞—à—ñ –∫–≤–∏—Ç–∫–∏ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.', {
                reply_markup: {
                    keyboard: [[{ text: 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏' }], [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
                    resize_keyboard: true,
                    one_time_keyboard: false,
                },
            })

            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–∞–º'—è—Ç—ñ
            delete orders[reference]
        } else {
            console.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è reference:', reference)
        }
    }

    res.sendStatus(200)
})

app.get('/success', (req, res) => {
    res.sendFile(path.join(__dirname, 'success.html'))
})

const PORT = process.env.PORT || 3000
app.listen(PORT, () => {
    console.log(`Server started on port ${PORT}`)
})
