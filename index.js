require('dotenv').config()
const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')
const express = require('express')
const qr = require('qr-image')
const fs = require('fs')
const path = require('path')
const winston = require('winston')

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => {
            return `${timestamp} [${level.toUpperCase()}] ${message}`
        })
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'bot.log' })
    ],
})

const token = process.env.TELEGRAM_BOT_TOKEN
const monoMerchantToken = process.env.MONOBANK_MERCHANT_TOKEN

const bot = new TelegramBot(token, { polling: true })

const events = [
    { id: 1, name: '–ö–æ–Ω—Ü–µ—Ä—Ç –ê', price: 500 }, // –¶—ñ–Ω–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö (UAH)
    { id: 2, name: '–§–µ—Å—Ç–∏–≤–∞–ª—å –ë', price: 75000 },
]

// –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
const ordersFilePath = path.join(__dirname, 'orders.json')
const userStatesFilePath = path.join(__dirname, 'userStates.json')
const jarsFilePath = path.join(__dirname, 'jars.json')

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
function loadData(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8')
            return JSON.parse(data)
        } else {
            return {}
        }
    } catch (error) {
        logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É ${filePath}: ${error}`)
        return {}
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function saveData(filePath, data) {
    try {
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2))
    } catch (error) {
        logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª ${filePath}: ${error}`)
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
let orders = loadData(ordersFilePath)
let userStates = loadData(userStatesFilePath)

// –ú–∞—Å–∏–≤ –±–∞–Ω–æ–∫ –∑ —ó—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ —Å—Ç–∞–Ω–æ–º
let jars = loadData(jarsFilePath)
if (Object.keys(jars).length === 0) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–Ω–∫–∏, —è–∫—â–æ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π
    jars = {
        1: {
            id: 1,
            Pc: "BJR6mYIOGCZLbsfKoLtngOGVPTYJMPoxYAxipw4LfywhDJjJZGSuxfc6g6q/8dxzbEHM8ygdEMEyev30jYE/GA4=",
            c: "hello",
            clientId: "AB3wzETu3o",
            referer: "",
            url: "https://send.monobank.ua/jar/AB3wzETu3o",
            isReserved: false,
            reservedBy: null,
            reservedAt: null,
        },
        2: {
            id: 2,
            Pc: "BAvCNDz9W4AILfiH85PcwtlgXqJAvtpnTRFX56Qu3kbl0WVgH+vYsIoSxOYP1avBd1CyiYibY/X9hCwZj35B0Mo=",
            c: "hello",
            clientId: "SzjFuD6UW",
            referer: "",
            url: "https://send.monobank.ua/jar/SzjFuD6UW",
            isReserved: false,
            reservedBy: null,
            reservedAt: null,
        },
    }
    saveData(jarsFilePath, jars)
}

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –±–∞–Ω–æ–∫
let previousJarAmounts = {}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id

    const mainMenu = {
        reply_markup: {
            keyboard: [[{ text: 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏' }], [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    }

    bot.sendMessage(chatId, '–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:', mainMenu)

    userStates[chatId] = { state: 'main_menu' }
    saveData(userStatesFilePath, userStates)
})

function getTitle(text) {
    const match = text.match(/^[^-]+/)
    return match ? match[0].trim() : ''
}

bot.on('message', (msg) => {
    const chatId = msg.chat.id
    const text = msg.text

    if (!userStates[chatId]) {
        userStates[chatId] = { state: 'main_menu' }
        saveData(userStatesFilePath, userStates)
    }

    const userState = userStates[chatId]

    if (text === 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏') {
        const eventButtons = events.map((event) => {
            return [{ text: `${event.name} - ${event.price / 100} –≥—Ä–Ω.`}]
        })

        const options = {
            reply_markup: {
                keyboard: eventButtons,
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        }

        bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç:', options)

        userState.state = 'selecting_event'
        userStates[chatId] = userState
        saveData(userStatesFilePath, userStates)
    } else if (userState.state === 'selecting_event') {
        const selectedEvent = events.find((event) => event.name === getTitle(text))
        if (selectedEvent) {
            userState.selectedEvent = selectedEvent

            const quantityButtons = []
            for (let i = 1; i <= 5; i++) {
                quantityButtons.push([{ text: `${i}` }])
            }

            const options = {
                reply_markup: {
                    keyboard: quantityButtons,
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            }

            bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ *${selectedEvent.name}*:`, {
                parse_mode: 'Markdown',
                ...options,
            })

            userState.state = 'selecting_quantity'
            userStates[chatId] = userState
            saveData(userStatesFilePath, userStates)
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –û–±—Ä–∞–Ω–∏–π —ñ–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.')
        }
    } else if (userState.state === 'selecting_quantity') {
        const quantity = parseInt(text)
        if (!isNaN(quantity) && quantity >= 1 && quantity <= 5) {
            const selectedEvent = userState.selectedEvent
            userState.quantity = quantity

            const paymentMethodButtons = [
                // [{ text: 'üí≥ –ü—Ä—è–º–∏–π –ø–ª–∞—Ç—ñ–∂' }],
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫—É' }]
            ]

            const options = {
                reply_markup: {
                    keyboard: paymentMethodButtons,
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            }

            bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:', options)

            userState.state = 'selecting_payment_method'
            userStates[chatId] = userState
            saveData(userStatesFilePath, userStates)
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –≤—ñ–¥ 1 –¥–æ 5.')
        }
    } else if (userState.state === 'selecting_payment_method') {
        const paymentMethod = text

        if (paymentMethod === 'üí≥ –ü—Ä—è–º–∏–π –ø–ª–∞—Ç—ñ–∂') {
            const selectedEvent = userState.selectedEvent
            const quantity = userState.quantity
            const totalPrice = selectedEvent.price * quantity

            try {
                const reference = `ticket_${selectedEvent.id}_${chatId}_${Date.now()}`

                orders[reference] = {
                    chatId: chatId,
                    eventId: selectedEvent.id,
                    quantity: quantity,
                    createdAt: Date.now(),
                }
                saveData(ordersFilePath, orders)

                const paymentData = {
                    amount: totalPrice,
                    ccy: 980,
                    merchantPaymInfo: {
                        reference: reference,
                        destination: `–û–ø–ª–∞—Ç–∞ ${quantity} –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ ${selectedEvent.name}`,
                    },
                    redirectUrl: 'https://nndvizh.site/success',
                    webHookUrl: 'https://nndvizh.site/monobank',
                }

                axios
                    .post('https://api.monobank.ua/api/merchant/invoice/create', paymentData, {
                        headers: {
                            'X-Token': monoMerchantToken,
                            'Content-Type': 'application/json',
                        },
                    })
                    .then((response) => {
                        const { invoiceId, pageUrl } = response.data

                        bot.sendMessage(
                            chatId,
                            `–î–ª—è –æ–ø–ª–∞—Ç–∏ ${quantity} –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ *${selectedEvent.name}* –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n${pageUrl}`,
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    remove_keyboard: true,
                                },
                            }
                        )

                        userStates[chatId] = { state: 'main_menu' }
                        saveData(userStatesFilePath, userStates)
                    })
                    .catch((error) => {
                        logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É: ${error}`)
                        bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                        userStates[chatId] = { state: 'main_menu' }
                        saveData(userStatesFilePath, userStates)
                    })
            } catch (error) {
                logger.error(`–ü–æ–º–∏–ª–∫–∞: ${error}`)
                bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                userStates[chatId] = { state: 'main_menu' }
                saveData(userStatesFilePath, userStates)
            }
        } else if (paymentMethod === 'üí∞ –û–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫—É') {
            const selectedEvent = userState.selectedEvent
            const quantity = userState.quantity
            const totalPrice = selectedEvent.price * quantity
            const totalPriceGrn = totalPrice / 100

            const reference = `jar_${selectedEvent.id}_${chatId}_${Date.now()}`

            // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –±–∞–Ω–∫–∏
            clearOldReservations()

            // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            const assignedJar = assignJarToUser(chatId)
            if (!assignedJar) {
                bot.sendMessage(chatId, '‚ùóÔ∏è –ù–∞—Ä–∞–∑—ñ –≤—Å—ñ –±–∞–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                userStates[chatId] = { state: 'main_menu' }
                saveData(userStatesFilePath, userStates)
                return
            }

            userState.orderInfo = {
                chatId: chatId,
                eventId: selectedEvent.id,
                quantity: quantity,
                totalPrice: totalPriceGrn,
                reference: reference,
                paymentConfirmed: false,
                jar: assignedJar, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–∞–Ω–∫–∏
                createdAt: Date.now(),
            }

            orders[reference] = userState.orderInfo
            saveData(ordersFilePath, orders)

            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            getJarAmount(assignedJar).then((amount) => {
                previousJarAmounts[chatId] = amount

                bot.sendMessage(
                    chatId,
                    `–î–ª—è –æ–ø–ª–∞—Ç–∏ ${quantity} –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ *${selectedEvent.name}* –Ω–∞ —Å—É–º—É ${totalPriceGrn} –≥—Ä–Ω –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n${assignedJar.url}`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            remove_keyboard: true,
                        },
                    }
                )

                bot.sendMessage(chatId, '–ü—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏.', {
                    reply_markup: {
                        keyboard: [[{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤' }]],
                        resize_keyboard: true,
                        one_time_keyboard: true,
                    },
                })

                userState.state = 'waiting_for_payment_confirmation'
                userStates[chatId] = userState
                saveData(userStatesFilePath, userStates)
            }).catch((error) => {
                logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É –±–∞–Ω–∫–∏: ${error}`)
                bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                userStates[chatId] = { state: 'main_menu' }
                saveData(userStatesFilePath, userStates)
            })
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É.')
        }
    } else if (userState.state === 'waiting_for_payment_confirmation') {
        if (text === '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤') {
            const orderInfo = userState.orderInfo

            checkJarPayment(orderInfo.totalPrice, orderInfo.jar, chatId).then((paymentConfirmed) => {
                if (paymentConfirmed) {
                    const selectedEvent = events.find((event) => event.id === orderInfo.eventId)
                    const quantity = orderInfo.quantity
                    const reference = orderInfo.reference

                    for (let i = 1; i <= quantity; i++) {
                        const ticketCode = `${reference}_${i}`
                        const ticketInfo = `–ö–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ ${selectedEvent.name}\n–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥: ${ticketCode}`

                        const qr_png = qr.image(ticketInfo, { type: 'png' })
                        const qrPath = path.join(__dirname, `${ticketCode}.png`)
                        const writeStream = fs.createWriteStream(qrPath)

                        qr_png.pipe(writeStream)

                        writeStream.on('finish', () => {
                            bot.sendPhoto(orderInfo.chatId, qrPath, {
                                caption: `‚úÖ –í–∞—à –∫–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ *${selectedEvent.name}*.`,
                                parse_mode: 'Markdown',
                            })
                                .then(() => {
                                    fs.unlinkSync(qrPath)
                                })
                                .catch((err) => {
                                    logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–≤–∏—Ç–∫–∞: ${err}`)
                                })
                        })
                    }

                    bot.sendMessage(orderInfo.chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—Å—ñ –≤–∞—à—ñ –∫–≤–∏—Ç–∫–∏ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.', {
                        reply_markup: {
                            keyboard: [[{ text: 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏' }], [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
                            resize_keyboard: true,
                            one_time_keyboard: false,
                        },
                    })

                    // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –±–∞–Ω–∫—É
                    releaseJar(orderInfo.jar.id)

                    userStates[chatId] = { state: 'main_menu' }
                    saveData(userStatesFilePath, userStates)
                    delete orders[reference]
                    saveData(ordersFilePath, orders)
                } else {
                    bot.sendMessage(chatId, '‚ùóÔ∏è –û–ø–ª–∞—Ç—É –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∑–¥—ñ–π—Å–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É, —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', {
                        reply_markup: {
                            keyboard: [[{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤' }]],
                            resize_keyboard: true,
                            one_time_keyboard: true,
                        },
                    })
                }
            }).catch((error) => {
                logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–ø–ª–∞—Ç–∏: ${error}`)
                bot.sendMessage(chatId, '‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
            })
        } else {
            bot.sendMessage(chatId, '‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤" –ø—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.', {
                reply_markup: {
                    keyboard: [[{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤' }]],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            })
        }
    } else if (text === '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞') {
        bot.sendMessage(
            chatId,
            '–¶–µ –±–æ—Ç –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ –º—É–∑–∏—á–Ω—ñ —ñ–≤–µ–Ω—Ç–∏. –û–±–µ—Ä—ñ—Ç—å "üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏", —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫.'
        )
    } else {
        // –Ü–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º—ñ –∫–æ–º–∞–Ω–¥–∏
    }
})

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
function assignJarToUser(chatId) {
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    clearOldReservations()

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–ª—å–Ω—É –±–∞–Ω–∫—É
    let freeJar = null
    for (const jarId in jars) {
        const jar = jars[jarId]
        if (!jar.isReserved) {
            freeJar = jar
            break
        }
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –±–∞–Ω–æ–∫, –∑–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞–Ω–∫—É –∑ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–º —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è–º
    if (!freeJar) {
        let oldestJar = null
        let oldestTime = Date.now()
        for (const jarId in jars) {
            const jar = jars[jarId]
            if (jar.reservedAt && jar.reservedAt < oldestTime) {
                oldestTime = jar.reservedAt
                oldestJar = jar
            }
        }
        if (oldestJar) {
            // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
            freeJar = oldestJar
            logger.info(`–ë–∞–Ω–∫–∞ ${freeJar.id} –±—É–ª–∞ –ø–µ—Ä–µ–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç—É ${chatId}`)
        } else {
            // –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±–∞–Ω–æ–∫
            return null
        }
    }

    // –†–µ–∑–µ—Ä–≤—É—î–º–æ –±–∞–Ω–∫—É –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    freeJar.isReserved = true
    freeJar.reservedBy = chatId
    freeJar.reservedAt = Date.now()
    saveData(jarsFilePath, jars)

    return freeJar
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –±–∞–Ω–∫–∏
function releaseJar(jarId) {
    if (jars[jarId]) {
        jars[jarId].isReserved = false
        jars[jarId].reservedBy = null
        jars[jarId].reservedAt = null
        saveData(jarsFilePath, jars)
        logger.info(`–ë–∞–Ω–∫–∞ ${jarId} –±—É–ª–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–∞`)
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å
function clearOldReservations() {
    const now = Date.now()
    const reservationTimeout = 12 * 60 * 60 * 1000 // 12 –≥–æ–¥–∏–Ω –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    for (const jarId in jars) {
        const jar = jars[jarId]
        if (jar.isReserved && jar.reservedAt && now - jar.reservedAt > reservationTimeout) {
            logger.info(`–ë–∞–Ω–∫–∞ ${jarId} –±—É–ª–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∞—Å—É —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è`)
            releaseJar(jarId)
        }
    }

    // –¢–∞–∫–æ–∂ –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    for (const reference in orders) {
        const order = orders[reference]
        if (order.createdAt && now - order.createdAt > reservationTimeout) {
            logger.info(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${reference} –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è`)
            // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –±–∞–Ω–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (order.jar && order.jar.id) {
                releaseJar(order.jar.id)
            }
            delete orders[reference]
            saveData(ordersFilePath, orders)
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –±–∞–Ω–∫–∏
async function getJarAmount(jar) {
    try {
        const response = await axios.post('https://send.monobank.ua/api/handler', {
            Pc: jar.Pc,
            c: jar.c,
            clientId: jar.clientId,
            referer: jar.referer
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        })

        const data = response.data

        if (data) {
            return parseFloat(data.jarAmount || 0)
        } else {
            throw new Error('jarAmount –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')
        }
    } catch (error) {
        logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É –±–∞–Ω–∫–∏: ${error}`)
        throw error
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç–∏
async function checkJarPayment(expectedAmount, jar, chatId) {
    try {
        const currentAmount = await getJarAmount(jar)
        const previousAmount = previousJarAmounts[chatId] || 0
        const amountDifference = currentAmount - previousAmount

        logger.info(`–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å –¥–ª—è —á–∞—Ç—É ${chatId}: ${previousAmount}, –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${currentAmount}, —Ä—ñ–∑–Ω–∏—Ü—è: ${amountDifference}`)

        if (amountDifference >= expectedAmount) {
            previousJarAmounts[chatId] = currentAmount
            return true
        } else {
            return false
        }
    } catch (error) {
        logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–ø–ª–∞—Ç–∏: ${error}`)
        throw error
    }
}

// –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω—å (–∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω)
setInterval(() => {
    clearOldReservations()
}, 10 * 60 * 1000) // 10 —Ö–≤–∏–ª–∏–Ω

// –û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Monobank –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
const app = express()
app.use(express.json())

app.get('/', (req, res) => {
    res.send('–ë–æ—Ç –ø—Ä–∞—Ü—é—î!')
})

app.post('/monobank', (req, res) => {
    const data = req.body

    if (data.status === 'success') {
        const reference = data.reference
        const order = orders[reference]

        logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ –≤—ñ–¥ Monobank: ${JSON.stringify(data)}, –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${JSON.stringify(order)}`)

        if (order) {
            const chatId = order.chatId
            const eventId = order.eventId
            const quantity = order.quantity
            const selectedEvent = events.find((event) => event.id === eventId)

            for (let i = 1; i <= quantity; i++) {
                const ticketCode = `${reference}_${i}`
                const ticketInfo = `–ö–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ ${selectedEvent.name}\n–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥: ${ticketCode}`

                const qr_png = qr.image(ticketInfo, { type: 'png' })
                const qrPath = path.join(__dirname, `${ticketCode}.png`)
                const writeStream = fs.createWriteStream(qrPath)

                qr_png.pipe(writeStream)

                writeStream.on('finish', () => {
                    bot.sendPhoto(chatId, qrPath, {
                        caption: `‚úÖ –í–∞—à –∫–≤–∏—Ç–æ–∫ ‚Ññ${i} –Ω–∞ *${selectedEvent.name}*.`,
                        parse_mode: 'Markdown',
                    })
                        .then(() => {
                            fs.unlinkSync(qrPath)
                        })
                        .catch((err) => {
                            logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–≤–∏—Ç–∫–∞: ${err}`)
                        })
                })
            }

            bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—Å—ñ –≤–∞—à—ñ –∫–≤–∏—Ç–∫–∏ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.', {
                reply_markup: {
                    keyboard: [[{ text: 'üé´ –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏' }], [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
                    resize_keyboard: true,
                    one_time_keyboard: false,
                },
            })

            delete orders[reference]
            saveData(ordersFilePath, orders)
        } else {
            logger.error(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è reference: ${reference}`)
        }
    }

    res.sendStatus(200)
})

app.get('/success', (req, res) => {
    res.sendFile(path.join(__dirname, 'success.html'))
})

const PORT = process.env.PORT || 3000
app.listen(PORT, () => {
    logger.info(`Server started on port ${PORT}`)
})
